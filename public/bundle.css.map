{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/Autocomplete.svelte"
  ],
  "sourcesContent": [
    "<script>\n\nimport {onMount} from 'svelte'\n\nexport let placeholder = 'Enter search text'\nexport let id = 'autocomplete'\nexport let label = null\nexport let exact = false // search must fall within the data list\nexport let minChars = 2\nexport let maxMatches = 7\nexport let fromStart = false\n\nlet search = ''\nlet matches = []\nlet data = null\nlet arrowCounter = -1\n\nconst URL = '../data/states.json'\n\nonMount(async () => {\n  const res = await fetch(URL)\n  data = await res.json()\n})\n\n// search states.json and filter it\nasync function searchStates() {\n  if (search.length < minChars) {\n    matches = []\n    return\n  }\n\n  // * Customize as needed for data set,\n  // * get matches to current text input\n  const searchString = (fromStart) ?  `^${search}` : `${search}`\n\n  matches = data.filter(item => {\n    const regex = new RegExp(searchString, 'gi')\n    return item.name.match(regex) || item.abbr.match(regex)\n  })\n\n  // if search is empty, don't show anything\n  // (otherwise would show all data)\n  if (search.length === 0) matches = []\n}\n\nfunction setSearch(index, clearMatches = false) {\n  search = matches[index].name\n  if (clearMatches) {\n    matches = []\n    arrowCounter = -1\n  }\n}\n\n// key events\nfunction onKeyDown (event) {\n  // ArrowDown\n  if (event.keyCode === 40 && arrowCounter < matches.length-1) {\n    arrowCounter = arrowCounter + 1\n    setSearch(arrowCounter)\n  // ArrowUp\n  } else if (event.keyCode === 38 && arrowCounter > -1) {\n    arrowCounter = arrowCounter - 1\n    setSearch(arrowCounter)\n  // Enter\n  // TODO: do nothing if there isn't a match list, this isn't working\n  } else if (event.keyCode === 13) {\n    event.preventDefault()\n    if (arrowCounter === -1) {\n      arrowCounter = 0 // Default select first item of list\n      setSearch(arrowCounter, true)\n    } else if(matches.length > 0) {\n      setSearch(arrowCounter, true)\n    }\n  // Escape\n  } else if (event.keyCode === 27) {\n    event.preventDefault()\n    matches = []\n    arrowCounter = -1\n  }\n}\n\n</script>\n\n<style>\n\n  input[type=\"text\"] {\n    width: 100%;\n  }\n  .result-list {\n    position: absolute;\n    width: auto;\n    margin-top: -5px;\n    z-index: 100;\n    box-shadow: 0 0 10px rgba(0,0,0,0.2);\n  }\n  .result {\n    padding: 0.5rem 1rem;\n    background-color: #fff;\n    border: solid 1px #ddd;\n  }\n  .result h3,\n  .result h4,\n  .result h5,\n  .result h6 {\n    margin: 0 0 0.25rem;\n  }\n  .result p {\n    margin: 0;\n  }\n  .is-active {\n    background-color: #dedede !important;\n  }\n\n</style>\n\n\n{#if label}\n  <label for={id}>{label}</label>\n{/if}\n<input\n  type=\"text\"\n  id={id}\n  placeholder={placeholder}\n  bind:value={search}\n  on:input={searchStates}\n  on:keydown={onKeyDown}\n  on:click={()=>arrowCounter=-1}\n  >\n\n<div class=\"result-list\">\n  {#if (matches.length > 0)}\n    {#each matches as match, i}\n      {#if i < maxMatches}\n        <div\n          on:click={()=>setSearch(i, true)}\n          class=\"result{ i === arrowCounter ? ' is-active' : '' }\"\n          >\n          <h4 data={match.name}>{match.name} ({match.abbr})</h4>\n          <small>Capital: <strong>{match.capital}</strong></small>\n        </div>\n      {/if}\n    {/each}\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAqFE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAC,CAAC,AAClB,KAAK,CAAE,IAAI,AACb,CAAC,AACD,YAAY,eAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AACtC,CAAC,AACD,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,MAAM,CAAC,IAAI,CACpB,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,IAAI,AACxB,CAAC,AAED,sBAAO,CAAC,EAAE,eAEC,CAAC,AACV,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,OAAO,AACrB,CAAC,AAID,UAAU,eAAC,CAAC,AACV,gBAAgB,CAAE,OAAO,CAAC,UAAU,AACtC,CAAC"
}